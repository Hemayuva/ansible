---
- hosts: localhost
  become: yes
  gather_facts: false

  vars:
    aws_access_key: ""
    aws_secret_key: ""
    vpc_name: Hema_vpc
    igw_name: Hema_igw
    pubsubnet_name: Hema_pub
    pvtsubnet_name: Hema_pvt
    pubroute_table_name: Hema_pub_rt
    pvtroute_table_name: Hema_pvt_rt
    security_group_name: Hema_sg
    vpc_cidr_block: '11.0.0.0/16'
    pubsubnet_cidr_block: '11.0.1.0/24'
    pvtsubnet_cidr_block: '11.0.2.0/24'
    region: "us-east-1"
    pubzone: "us-east-1a"
    pvtzone: "us-east-1b"
    image_id: "ami-01b799c439fd5516a"
    instance_type: "t2.micro"
    instance_name: inline-EC2

  tasks:
    ### VPC Creation ###
    - ec2_vpc_net:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        cidr_block: "{{ vpc_cidr_block }}"
        name: "{{ vpc_name }}"
        region: "{{ region }}"
        dns_support: yes
        dns_hostnames: yes
        tenancy: default
        state: present
      register: vpc_result

    ### Internet Gateway Creation ###
    - ec2_vpc_igw:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ igw_name }}"
      register: igw_result

    ### Create Public Subnet ###
    - ec2_vpc_subnet:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        az: "{{ pubzone }}"
        state: present
        cidr: "{{ pubsubnet_cidr_block }}"
        map_public: yes
        resource_tags:
          Name: "{{ pubsubnet_name }}"
      register: pubsubnet_result

    ### Create Private Subnet ###
    - ec2_vpc_subnet:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        az: "{{ pvtzone }}"
        state: present
        cidr: "{{ pvtsubnet_cidr_block }}"
        map_public: no
        resource_tags:
          Name: "{{ pvtsubnet_name }}"
      register: pvtsubnet_result

    ### Create Public Route Table ###
    - ec2_vpc_route_table:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ pubroute_table_name }}"
        subnets: [ "{{ pubsubnet_result.subnet.id }}" ]
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_result.gateway_id }}"
      register: public_route_table

    ### Create Private Route Table ###
    - ec2_vpc_route_table:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ pvtroute_table_name }}"
        subnets: [ "{{ pvtsubnet_result.subnet.id }}" ]
      register: private_route_table

    ### Create Security Group ###
    - ec2_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        state: present
        name: "{{ security_group_name }}"
        description: allow
        tags:
          Name: "{{ security_group_name }}"
        rules:
          - proto: all
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all traffic
      register: security_group_results

    - name: Create EC2 Instance
      ec2_instance:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        instance_type: t2.micro
        image_id: ami-01b799c439fd5516a
        region: "{{ region }}"
        key_name: hm
        subnet_id: "{{ pubsubnet_result.subnet.id }}"
        wait: yes
        tags:
          Name: inline-instance
        user_data: |
          #!bin/bash
          yum update -y
          yum install git -y
          yum install httpd -y
          systemctl start httpd.service
          systemctl enable httpd.service
          git clone http://github.com/Hemayuva/ecomm.git /var/www/html/

      vars:
        ansible_python_interpreter: /usr/bin/python3.7
~
~
